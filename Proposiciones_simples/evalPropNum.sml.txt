Moscow ML version 2.01 (January 2004)
Enter `quit();' to quit.
- (* Lenguaje de proposiciones con constantes. No tiene variables *)

(* Aqui definimos la sintaxis abstracta de nuestro pequenno
   lenguaje de proposiciones con constantes *)

datatype PropConst =
  constante    of bool
| negacion     of PropConst
| conjuncion   of PropConst * PropConst
| disyuncion   of PropConst * PropConst
| implicacion  of PropConst * PropConst
| equivalencia of PropConst * PropConst
;
> New type names: =PropConst
  datatype PropConst =
  (PropConst,
   {con conjuncion : PropConst * PropConst -> PropConst,
    con constante : bool -> PropConst,
    con disyuncion : PropConst * PropConst -> PropConst,
    con equivalencia : PropConst * PropConst -> PropConst,
    con implicacion : PropConst * PropConst -> PropConst,
    con negacion : PropConst -> PropConst})
  con conjuncion = fn : PropConst * PropConst -> PropConst
  con constante = fn : bool -> PropConst
  con disyuncion = fn : PropConst * PropConst -> PropConst
  con equivalencia = fn : PropConst * PropConst -> PropConst
  con implicacion = fn : PropConst * PropConst -> PropConst
  con negacion = fn : PropConst -> PropConst
-
nonfix ~:
val ~: = negacion

infix 7 :&&:
val (op :&&:) = conjuncion

infix 6 :||:
val (op :||:) = disyuncion

infix 5 :=>:
val (op :=>:) = implicacion

infix 4 :<=>:
val (op :<=>:) = equivalencia

;
> nonfix ~:
  infix 7 :&&:
  infix 6 :||:
  infix 5 :=>:
  infix 4 :<=>:
  val ~: = fn : PropConst -> PropConst
  val :&&: = fn : PropConst * PropConst -> PropConst
  val :||: = fn : PropConst * PropConst -> PropConst
  val :=>: = fn : PropConst * PropConst -> PropConst
  val :<=>: = fn : PropConst * PropConst -> PropConst
- (* Valores sem치nticos.
   Nuestro lenguaje es muy sencillo, solo admite literales enteras (0 y 1) *)

type Val = int
;
> type Val = int
- (* Evaluador de proposiciones.

   Hay un caso para cada variante de proposici칩n.
*)

fun min (x,y) = if x < y then x else y
;
> val min = fn : int * int -> int
-
fun max (x,y) = if x > y then x else y
;
> val max = fn : int * int -> int
-

fun evalPropNum prop =
  case prop of
    constante valor
       => if valor then 1 else 0
  | negacion prop1
       => 1 - (evalProp prop1)
  | conjuncion (prop1, prop2)
       => let val valor1 = evalProp prop1
              and valor2 = evalProp prop2
          in  min (valor1, valor2)
          end
  | disyuncion (prop1, prop2)
       => let val valor1 = evalProp prop1
              and valor2 = evalProp prop2
          in  max (valor1, valor2)
          end
  | implicacion (prop1, prop2)
       => let val valor1 = evalProp prop1
              and valor2 = evalProp prop2
          in  if valor1 <= valor2 then 1 else 0
          end
  | equivalencia (prop1, prop2)
       => let val valor1 = evalProp prop1
              and valor2 = evalProp prop2
          in  valor1 = valor2
          end
;
! Toplevel input:
!        => 1 - (evalProp prop1)
!                ^^^^^^^^
! Unbound value identifier: evalProp
-

(* Evaluador de proposiciones.

   Hay un caso para cada variante de proposici칩n.
*)

fun min (x,y) = if x < y then x else y
;
> val min = fn : int * int -> int
-
fun max (x,y) = if x > y then x else y
;
> val max = fn : int * int -> int
-

fun evalPropNum prop =
  case prop of
    constante valor
       => if valor then 1 else 0
  | negacion prop1
       => 1 - (evalPropNum prop1)
  | conjuncion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  min (valor1, valor2)
          end
  | disyuncion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  max (valor1, valor2)
          end
  | implicacion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  if valor1 <= valor2 then 1 else 0
          end
  | equivalencia (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  valor1 = valor2
          end
;
! Toplevel input:
!           in  valor1 = valor2
!               ^^^^^^^^^^^^^^^
! Type clash: expression of type
!   bool
! cannot have type
!   int
-

(* Evaluador de proposiciones.

   Hay un caso para cada variante de proposici칩n.
*)

fun min (x,y) = if x < y then x else y
;
> val min = fn : int * int -> int
-
fun max (x,y) = if x > y then x else y
;
> val max = fn : int * int -> int
-
fun bool2int true  = 1
|   bool2int false = 0


fun evalPropNum prop =
  case prop of
    constante valor
       => bool2int valor
  | negacion prop1
       => 1 - (evalPropNum prop1)
  | conjuncion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  min (valor1, valor2)
          end
  | disyuncion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  max (valor1, valor2)
          end
  | implicacion (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  bool2int (valor1 <= valor2)
          end
  | equivalencia (prop1, prop2)
       => let val valor1 = evalPropNum prop1
              and valor2 = evalPropNum prop2
          in  bool2int (valor1 = valor2)
          end
;
> val bool2int = fn : bool -> int
  val evalPropNum = fn : PropConst -> int
-

(* pruebas *)

val f = constante false
val t = constante true

val prop1 = f :=>: f :<=>: ~: f :=>: ~: f
val prop2 = f :=>: f :<=>: ~: f :||: f
;
> val f = constante false : PropConst
  val t = constante true : PropConst
  val prop1 =
    equivalencia(implicacion(constante false, constante false),
                 implicacion(negacion(constante false),
                             negacion(constante false))) : PropConst
  val prop2 =
    equivalencia(implicacion(constante false, constante false),
                 disyuncion(negacion(constante false), constante false)) :
  PropConst
-
val p = f;
> val p = constante false : PropConst
- val q = t;
> val q = constante true : PropConst
-
val prop3 = p :=>: q :<=>: ~: p :||: q
val prop4 = p :=>: q :<=>: ~: q :=>: ~: p

val prop5 = t :=>: f :<=>: ~: p :||: q
val prop6 = p :=>: q :<=>: ~: q :=>: ~: p
;
> val prop3 =
    equivalencia(implicacion(constante false, constante true),
                 disyuncion(negacion(constante false), constante true)) :
  PropConst
  val prop4 =
    equivalencia(implicacion(constante false, constante true),
                 implicacion(negacion(constante true),
                             negacion(constante false))) : PropConst
  val prop5 =
    equivalencia(implicacion(constante true, constante false),
                 disyuncion(negacion(constante false), constante true)) :
  PropConst
  val prop6 =
    equivalencia(implicacion(constante false, constante true),
                 implicacion(negacion(constante true),
                             negacion(constante false))) : PropConst
-
;
- evalPropNum p;
> val it = 0 : int
- p;
> val it = constante false : PropConst
- evalPropNum q;
> val it = 1 : int
- q
;
> val it = constante true : PropConst
- prop1;
> val it =
    equivalencia(implicacion(constante false, constante false),
                 implicacion(negacion(constante false),
                             negacion(constante false))) : PropConst
- evalPropNum prop1;
> val it = 1 : int
-